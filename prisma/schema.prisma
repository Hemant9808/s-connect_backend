  datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
  }

  generator client {
    provider = "prisma-client-js"
  }

  enum UserRole {
    SUPER_ADMIN
    ADMIN
    USER
  }

  enum UserType {
    STUDENT
    FACULTY
  }

  enum GroupCategory {
    SECTION
    CLUB
    PLACEMENT
    PUBLIC
    UNIVERSAL
  }

  enum branch{
    CSE
    ECE
    MECH
    CIVIL
    EEE
    IT
  }



model UserDetails {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    systemId    String  @unique
    name        String
    gender      String
    email       String
    contact     String

   
}

  model User {
    id                  String     @id @default(auto()) @map("_id") @db.ObjectId
    email               String     @unique
    role                UserRole   @default(USER)
    type                UserType
    name                String?
    contact             String?
    year                Int?
    branch              String?
    section             String?
    otp                 String?
    password            String
    otpExpiry           DateTime?
    otpAttempts         Int        @default(0)
    lastOtpAttempt      DateTime?
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @default(now())
    groupsCreated       Group[]    @relation("CreatedGroups")
    administeredGroups  GroupAdmin[]
    memberships         UserGroupMembership[]
    posts               Post[]
    events              Event[]

   
   
  }

    model Group {
      id          String       @id @default(auto()) @map("_id") @db.ObjectId
      name        String
      description String?
      imageUrl    String?
      category    GroupCategory
      isPublic    Boolean      @default(false)
      createdAt   DateTime     @default(now())
      updatedAt   DateTime     @default(now())
      tags        String[]
      year        Int?
      branch      branch?
      section     String?
      createdBy   User         @relation("CreatedGroups", fields: [createdById], references: [id])
      createdById String       @db.ObjectId

      admins      GroupAdmin[]
      members     UserGroupMembership[]
      posts       Post[]

      @@unique([name, category])
      @@index([category])
    }

  

  model GroupAdmin {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    group     Group    @relation(fields: [groupId], references: [id])
    groupId   String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    createdAt DateTime @default(now())
  }

  model UserGroupMembership {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    group     Group    @relation(fields: [groupId], references: [id])
    groupId   String   @db.ObjectId
    joinedAt  DateTime @default(now())

    @@unique([userId, groupId]) // Add unique constraint
  }

  model Post {
    id                 String   @id @default(auto()) @map("_id") @db.ObjectId
    title              String
    mainImg            String
    description        String
    secondaryImg       String[]
    secondaryDesc      String
    content            String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    group     Group    @relation(fields: [groupId], references: [id])
    groupId   String   @db.ObjectId
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String   @db.ObjectId

    @@index([groupId])
    @@index([authorId])
  }

  
enum EventTargetType {
  EVERYONE
  GROUP
  YEAR       // Can be replaced with actual years later
  DEPARTMENT // Can be replaced with actual departments later
}

  model Event {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  dateTime    DateTime
  mediaUrl    String?
  targetType  EventTargetType
  targetValue String?        // Can store group ID, year value, or department name
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
  
  // Relationships
  author      User           @relation(fields: [authorId], references: [id])
  authorId    String         @db.ObjectId

  @@index([authorId])
  @@index([targetType])
  @@index([createdAt])
}
